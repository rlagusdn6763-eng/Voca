name: Daily vocab update

on:
  workflow_dispatch:
  schedule:
    - cron: '30 23 * * *'   # 08:30 KST

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Python
        run: python3 --version

      - name: Validate pool.json (must be a JSON array)
        run: |
          python3 - << 'PY'
          import json, sys, pathlib
          p = pathlib.Path('pool.json')
          if not p.exists():
              sys.exit("pool.json not found at repo root")
          try:
              data = json.loads(p.read_text(encoding='utf-8'))
          except Exception as e:
              sys.exit(f"Invalid JSON in pool.json: {e}")
          if not isinstance(data, list) or not data:
              sys.exit("pool.json must be a non-empty JSON array")
          print(f"OK: pool.json items = {len(data)}")
          PY

      - name: Generate words.json (KST, 10/day, no repeat until pool cycles)
        run: |
          python3 - << 'PY'
          import json, datetime as dt, pathlib, math, random, sys
          pool = json.loads(pathlib.Path('pool.json').read_text(encoding='utf-8'))

          rng = random.Random(20250822)   # fixed seed for stable shuffle
          pool_shuffled = pool[:]
          rng.shuffle(pool_shuffled)

          KST = dt.timezone(dt.timedelta(hours=9))
          today_kst = dt.datetime.now(dt.timezone.utc).astimezone(KST).date()

          CHUNK = 10
          total = len(pool_shuffled)
          dayspan = (total + CHUNK - 1) // CHUNK  # ceil
          day_index = today_kst.toordinal() % dayspan
          start, end = day_index * CHUNK, day_index * CHUNK + CHUNK
          sample = (pool_shuffled + pool_shuffled)[start:end]

          pathlib.Path('words.json').write_text(
              json.dumps(sample, ensure_ascii=False, indent=2),
              encoding='utf-8'
          )
          PY

      - name: Validate words.json (array of items with phrase/meaning)
        run: |
          python3 - << 'PY'
          import json, sys, pathlib
          p = pathlib.Path('words.json')
          try:
              data = json.loads(p.read_text(encoding='utf-8'))
          except Exception as e:
              sys.exit(f"Invalid JSON in words.json: {e}")
          if not isinstance(data, list):
              sys.exit("words.json must be a JSON array")
          for i, x in enumerate(data):
              if not isinstance(x, dict) or 'phrase' not in x:
                  sys.exit(f"Bad item at index {i}: {x}")
          print(f"OK: words.json items = {len(data)}")
          PY

      - name: Commit & push if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add words.json
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Daily words update"
            git push
          fi
