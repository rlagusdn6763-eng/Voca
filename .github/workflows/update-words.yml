name: Daily vocab update

on:
  workflow_dispatch:
  schedule:
    - cron: '30 23 * * *'   # 08:30 KST

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      # 0) main 전체 히스토리 체크아웃
      - name: Checkout main (full history)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      # 1) 진단용 현재 상태 출력
      - name: Repo status (before)
        run: |
          git --version
          git remote -v
          git branch -vv
          git log --oneline -5 || true
          ls -la

      # 2) 원격 최신 반영
      - name: Pull latest (rebase)
        run: |
          git fetch origin main
          git pull --rebase origin main

      - name: Check Python
        run: python3 --version

      # 3) pool.json 유효성 검사 (어느 줄에서 깨졌는지 메시지 자세히 표시)
      - name: Validate pool.json
        run: |
          python3 - << 'PY'
          import json, sys, pathlib
          p = pathlib.Path('pool.json')
          if not p.exists():
            sys.exit("pool.json not found at repo root")
          try:
            data = json.loads(p.read_text(encoding='utf-8'))
          except Exception as e:
            sys.exit(f"Invalid JSON in pool.json: {e}")
          if not isinstance(data, list) or not data:
            sys.exit("pool.json must be a non-empty JSON array")
          for i, x in enumerate(data):
            if not isinstance(x, dict) or 'phrase' not in x:
              sys.exit(f"Bad item at index {i}: {x}")
          print(f"OK: pool.json items = {len(data)}; first='{data[0]['phrase']}', last='{data[-1]['phrase']}'")
          PY

      # 4) words.json 생성 (중복 방지)
      - name: Generate words.json (KST, 10/day)
        run: |
          python3 - << 'PY'
          import json, datetime as dt, pathlib, random
          pool = json.loads(pathlib.Path('pool.json').read_text(encoding='utf-8'))

          rng = random.Random(20250822)
          pool_shuffled = pool[:]
          rng.shuffle(pool_shuffled)

          KST = dt.timezone(dt.timedelta(hours=9))
          today_kst = dt.datetime.now(dt.timezone.utc).astimezone(KST).date()

          CHUNK = 10
          total = len(pool_shuffled)
          dayspan = (total + CHUNK - 1) // CHUNK
          day_index = today_kst.toordinal() % dayspan
          start, end = day_index * CHUNK, day_index * CHUNK + CHUNK
          sample = (pool_shuffled + pool_shuffled)[start:end]

          pathlib.Path('words.json').write_text(
            json.dumps(sample, ensure_ascii=False, indent=2),
            encoding='utf-8'
          )
          print(f"Generated {len(sample)} items for {today_kst} KST; first='{sample[0]['phrase']}'")
          PY

      # 5) words.json 유효성 검사
      - name: Validate words.json
        run: |
          python3 - << 'PY'
          import json, sys, pathlib
          p = pathlib.Path('words.json')
          try:
            data = json.loads(p.read_text(encoding='utf-8'))
          except Exception as e:
            sys.exit(f"Invalid JSON in words.json: {e}")
          if not isinstance(data, list) or not data:
            sys.exit("words.json must be a non-empty JSON array")
          for i, x in enumerate(data):
            if not isinstance(x, dict) or 'phrase' not in x:
              sys.exit(f"Bad item at index {i}: {x}")
          print(f"OK: words.json items = {len(data)}")
          PY

      # 6) 안전 푸시: pull --rebase 후 push, 실패 시 3회 재시도
      - name: Commit & push if changed (safe retry)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add words.json
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "Daily words update"

          for i in 1 2 3; do
            echo "Push attempt #$i"
            git pull --rebase origin main || true
            if git push origin HEAD:main; then
              echo "Push succeeded"
              exit 0
            fi
            echo "Push failed — retrying..."
            sleep 2
          done

          echo "Push failed after 3 attempts"
          exit 1

      # 7) 진단용 현재 상태 출력 (후)
      - name: Repo status (after)
        if: always()
        run: |
          git log --oneline -3 || true
          ls -la
