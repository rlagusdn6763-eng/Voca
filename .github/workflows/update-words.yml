 name: Daily vocab update

on:
  workflow_dispatch:
  schedule:
    - cron: '30 23 * * *'   # 08:30 KST

# 동시에 두 개 이상 겹치지 않게
concurrency:
  group: daily-vocab-update
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main (full history)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Prepare git (autostash)
        run: |
          git config pull.rebase true
          git config rebase.autoStash true
          git fetch origin main
          git pull --rebase origin main

      - name: Validate pool.json
        run: |
          python3 - << 'PY'
          import json, sys, pathlib
          p = pathlib.Path('pool.json')
          if not p.exists():
            sys.exit("pool.json not found at repo root")
          try:
            data = json.loads(p.read_text(encoding='utf-8'))
          except Exception as e:
            sys.exit(f"Invalid JSON in pool.json: {e}")
          if not isinstance(data, list) or not data:
            sys.exit("pool.json must be a non-empty JSON array")
          for i,x in enumerate(data):
            if not isinstance(x,dict) or 'phrase' not in x:
              sys.exit(f"Bad item at index {i}: {x}")
          print(f"OK: pool.json items = {len(data)}")
          PY

      - name: Generate words.json (KST, 10/day, no-repeat)
        run: |
          python3 - << 'PY'
          import json, datetime as dt, pathlib, random
          pool = json.loads(pathlib.Path('pool.json').read_text(encoding='utf-8'))
          rng = random.Random(20250822)
          pool_shuffled = pool[:]; rng.shuffle(pool_shuffled)
          KST = dt.timezone(dt.timedelta(hours=9))
          today = dt.datetime.now(dt.timezone.utc).astimezone(KST).date()
          CHUNK=10; n=len(pool_shuffled); span=(n+CHUNK-1)//CHUNK
          idx = today.toordinal() % span
          s,e = idx*CHUNK, idx*CHUNK+CHUNK
          sample = (pool_shuffled + pool_shuffled)[s:e]
          pathlib.Path('words.json').write_text(
            json.dumps(sample, ensure_ascii=False, indent=2), encoding='utf-8')
          print(f"Generated {len(sample)} items for {today}")
          PY

      - name: Validate words.json
        run: |
          python3 - << 'PY'
          import json, sys, pathlib
          d = json.loads(pathlib.Path('words.json').read_text(encoding='utf-8'))
          assert isinstance(d,list) and d and all(isinstance(x,dict) and 'phrase' in x for x in d)
          print(f"OK: words.json items = {len(d)}")
          PY

      - name: Commit & push (with rebase/retry, then force-with-lease)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add words.json
          if git diff --cached --quiet; then
            echo "No changes to commit."; exit 0
          fi
          git commit -m "Daily words update"

          for i in 1 2 3; do
            echo "Push attempt #$i"
            git fetch origin main
            git pull --rebase origin main || true
            if git push origin HEAD:main; then
              echo "Push succeeded"; exit 0
            fi
            sleep 2
          done

          echo "Retrying with force-with-lease (safe force push)"
          git push --force-with-lease origin HEAD:main
